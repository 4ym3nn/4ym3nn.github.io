<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>//localhost:1313/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jun 2025 22:29:05 +0100</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>brainrot</title>
      <link>//localhost:1313/posts/tamu2025/brainrot/</link>
      <pubDate>Tue, 17 Jun 2025 22:29:05 +0100</pubDate>
      <guid>//localhost:1313/posts/tamu2025/brainrot/</guid>
      <description>&lt;h1 id=&#34;tamu2025---rev-challenge-brainrot&#34;&gt;tamu2025 - rev Challenge: brainrot&lt;/h1&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;This challenge involves reverse engineering a custom &amp;ldquo;brain&amp;rdquo; simulation to extract a flag. The brain operates on a set of neurons and performs transformations using a combination of hashing, rotation, and matrix operations. The goal is to deduce the input that produces the required outputs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;&#xA;&lt;p&gt;The solution involves implementing the brain simulation in Python and using the Z3 solver to reverse the transformations. Below is the code and explanation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>otp</title>
      <link>//localhost:1313/posts/tamu2025/otp/</link>
      <pubDate>Tue, 17 Jun 2025 22:29:05 +0100</pubDate>
      <guid>//localhost:1313/posts/tamu2025/otp/</guid>
      <description>&lt;h1 id=&#34;tamu2025---rev-challenge-otp&#34;&gt;tamu2025 - rev Challenge: otp&lt;/h1&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;This challenge involves reverse engineering and cryptographic analysis to extract keys and decrypt an encrypted flag. The solution uses GDB scripting to automate the extraction of keys from memory frames and applies XOR decryption to retrieve the original flag.&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;&#xA;&lt;h3 id=&#34;gdb-script-extractkeys&#34;&gt;GDB Script: ExtractKeys&lt;/h3&gt;&#xA;&lt;p&gt;The following GDB script automates the extraction of keys from memory frames:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExtractKeys&lt;/span&gt;(gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Command):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__init__&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super(ExtractKeys, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;__init__&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extract_keys&amp;#34;&lt;/span&gt;, gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COMMAND_USER)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_gdb_line&lt;/span&gt;(self, line):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Extracts byte values from a single line of GDB output.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Example input: &amp;#34;0x7ffe603d0100: 0x45 0x65 0x41 0x15 0x57 0xc0 0xdb 0xda&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Returns: [&amp;#34;45&amp;#34;, &amp;#34;65&amp;#34;, &amp;#34;41&amp;#34;, &amp;#34;15&amp;#34;, &amp;#34;57&amp;#34;, &amp;#34;c0&amp;#34;, &amp;#34;db&amp;#34;, &amp;#34;da&amp;#34;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:\s+((?:0x[0-9a-f]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{2}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\s*)+)&amp;#34;&lt;/span&gt;, line)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x([0-9a-f]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{2}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_gdb_output&lt;/span&gt;(self, gdb_output):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Parses the entire GDB output to extract key bytes.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Returns a single hex string.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        key_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; gdb_output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            key_bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_gdb_line(line))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(key_bytes)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invoke&lt;/span&gt;(self, arg, from_tty):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        start_frame, end_frame &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1003&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; key_file:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; frame_id &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start_frame, end_frame &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;frame &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;frame_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, to_string&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    key_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x/59bx key&amp;#34;&lt;/span&gt;, to_string&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    key_hex_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_gdb_output(key_output)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; key_hex_string:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        key_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(key_hex_string &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Skipping frame &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;frame_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; (No key found)&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[✔] All keys extracted to keys.txt&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ExtractKeys()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;decryption-process&#34;&gt;Decryption Process&lt;/h3&gt;&#xA;&lt;p&gt;The decryption process involves loading the encrypted flag and the extracted keys, then applying XOR decryption in reverse order:&lt;/p&gt;</description>
    </item>
    <item>
      <title>xorox</title>
      <link>//localhost:1313/posts/tamu2025/xorox/</link>
      <pubDate>Tue, 17 Jun 2025 22:29:05 +0100</pubDate>
      <guid>//localhost:1313/posts/tamu2025/xorox/</guid>
      <description>&lt;h1 id=&#34;tamu2025---rev-challenge-xorox&#34;&gt;tamu2025 - rev Challenge: xorox&lt;/h1&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;This challenge involves reverse engineering a binary to determine the required input that produces the desired output. The solution involves XOR operations and understanding the binary&amp;rsquo;s constants and register values.&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;&#xA;&lt;p&gt;The following Python script demonstrates the solution:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; struct&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Constants from the binary&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constant &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2a8c7f3acdf36ffb&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# First 8 bytes of the constant&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8cc2eef32660caaa&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# Next 8 bytes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xefa1fd61d7a3b592&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# Next 8 bytes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xa9ddc2d22a90025e&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# Last 8 bytes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# YMM7 register values from GDB (converted to 4x 64-bit integers)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ymm7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1eca2043bfc01980&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xd386a3ba753fbe9f&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x87d5cc1688d185ea&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xd4aebbb741cf3001&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qwords_to_bytes&lt;/span&gt;(qwords):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(struct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;Q&amp;#39;&lt;/span&gt;, q) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; qwords)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constant_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qwords_to_bytes(constant)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ymm7_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qwords_to_bytes(ymm7)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;required_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes(a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(constant_bytes, ymm7_bytes))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gigem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; required_input&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Raw bytes:&amp;#34;&lt;/span&gt;, flag)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Try to decode as ASCII (some bytes may not be printable)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASCII:&amp;#34;&lt;/span&gt;, flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnicodeDecodeError&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Contains non-ASCII bytes&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;flag&#34;&gt;Flag&lt;/h2&gt;&#xA;&lt;p&gt;The flag for this challenge is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dna</title>
      <link>//localhost:1313/posts/smileyctf2025/dna/</link>
      <pubDate>Tue, 17 Jun 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/smileyctf2025/dna/</guid>
      <description>&lt;h1 id=&#34;smileyctf2025-&#34;&gt;smileyCTF2025 :&lt;/h1&gt;&#xA;&lt;h2 id=&#34;revdna&#34;&gt;rev/DNA&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./challenge.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;flag--we_ought_to_start_storing_our_data_as_dna_instead&#34;&gt;Flag : .;,;.{we_ought_to_start_storing_our_data_as_dna_instead}&lt;/h2&gt;&#xA;&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;&#xA;&lt;p&gt;deoxy ribo nucleic acid deoxy meaning without oxygen ribo meaning the 5-carbon sugar backbone nucleic meaning of the nucleus acid meaning proton donor&lt;/p&gt;&#xA;&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;&#xA;&lt;h2 id=&#34;initial-recon&#34;&gt;Initial Recon&lt;/h2&gt;&#xA;&lt;p&gt;We start by looking at the challenge directory:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  dna ls&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main.cpython-310.pyc  vm.dna&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  dna &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that this is a virtual machine challenge, and the Python code has been compiled with Python 3.10 into a .pyc file ,Before diving into the challenge, let&amp;rsquo;s take a moment to understand what a virtual machine (VM) is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/gateway</title>
      <link>//localhost:1313/posts/apocalypse-htb/gateway/</link>
      <pubDate>Tue, 17 Jun 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/apocalypse-htb/gateway/</guid>
      <description>&lt;h1 id=&#34;first-challenge-gateway&#34;&gt;FIRST CHALLENGE: Gateway&lt;/h1&gt;&#xA;&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;&#xA;&lt;p&gt;Malakar has ensnared you with a dark spell, banishing you to the depths of the Nether world. Escape hinges on recalling the ancient enchantments of your forefathers. Wield their arcane power to shatter the Aether gateways and reclaim your freedom. Only the correct incantation—32 bytes of mystical precision—will unlock the path back to the mortal realm. Can you decipher the spell and blast through the barriers of this infernal trap?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/imagepro</title>
      <link>//localhost:1313/posts/apocalypse-htb/imagepro/</link>
      <pubDate>Tue, 17 Jun 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/apocalypse-htb/imagepro/</guid>
      <description>&lt;h1 id=&#34;impossimaze-writeup&#34;&gt;Impossimaze Writeup&lt;/h1&gt;&#xA;&lt;h2 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Impossimaze&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Medium&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Reverse Engineering / Exploitation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h2&gt;&#xA;&lt;h3 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h3&gt;&#xA;&lt;p&gt;The challenge presents a seemingly simple ncurses-based program where the player navigates through a maze-like interface. The goal is to uncover a hidden flag by understanding the program&amp;rsquo;s intricate mechanics.&lt;/p&gt;&#xA;&lt;h3 id=&#34;key-observations&#34;&gt;Key Observations&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The program uses ncurses library for terminal-based interaction&lt;/li&gt;&#xA;&lt;li&gt;Allows movement using arrow keys&lt;/li&gt;&#xA;&lt;li&gt;Displays terminal dimensions&lt;/li&gt;&#xA;&lt;li&gt;Contains a specific hidden mechanism when terminal is exactly 13x37&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;reverse-engineering-approach&#34;&gt;Reverse Engineering Approach&lt;/h2&gt;&#xA;&lt;h3 id=&#34;code-breakdown&#34;&gt;Code Breakdown&lt;/h3&gt;&#xA;&lt;p&gt;The main function reveals several interesting characteristics:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/crackme</title>
      <link>//localhost:1313/posts/nexusftc-2025/crackme/</link>
      <pubDate>Sat, 10 May 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/nexusftc-2025/crackme/</guid>
      <description>&lt;h1 id=&#34;writeup-solving-the-reverse-engineering-challenge&#34;&gt;Writeup: Solving the Reverse Engineering Challenge&lt;/h1&gt;&#xA;&lt;p&gt;This writeup details the process of solving a reverse engineering challenge involving an ELF64 x86-64 binary named &lt;code&gt;chall&lt;/code&gt;. The goal is to determine the correct input string that, when provided to the program via &lt;code&gt;./chall&lt;/code&gt;, results in the output:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Congratss!! you can now submit the flag&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Through disassembly, analysis of the &lt;code&gt;.rodata&lt;/code&gt; section, and reverse engineering, we derive the 40-character flag: &lt;code&gt;nexus{vm_revers1ng_1s_f45c1n4t1ng_4nd_3xtremely_p41nful}&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Binary&lt;/strong&gt;: &lt;code&gt;chall&lt;/code&gt;, an ELF64 x86-64 executable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/crackmev2</title>
      <link>//localhost:1313/posts/nexusftc-2025/crackmev2/</link>
      <pubDate>Sat, 10 May 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/nexusftc-2025/crackmev2/</guid>
      <description>&lt;h1 id=&#34;ctf-writeup-virtual-machine-flag-extraction&#34;&gt;CTF Writeup: Virtual Machine Flag Extraction&lt;/h1&gt;&#xA;&lt;p&gt;This writeup details the process of solving a Capture The Flag (CTF) challenge that involves reverse-engineering a virtual machine (VM) implemented in C. The VM reads instructions from a binary file (&lt;code&gt;code.bin&lt;/code&gt;), processes an input flag, and outputs &amp;ldquo;Correct!&amp;rdquo; if the flag is valid. The goal is to determine the correct flag by analyzing the VM&amp;rsquo;s behavior and extracting the necessary computations from &lt;code&gt;code.bin&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/nativi</title>
      <link>//localhost:1313/posts/nexusftc-2025/nativi/</link>
      <pubDate>Sat, 10 May 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/nexusftc-2025/nativi/</guid>
      <description>&lt;h1 id=&#34;ctf-challenge-writeup-nativi&#34;&gt;CTF Challenge Writeup: NATIVI&lt;/h1&gt;&#xA;&lt;h2 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h2&gt;&#xA;&lt;p&gt;This challenge involves reverse-engineering a C++ program to uncover a hidden flag in the format &lt;code&gt;nexus{...}&lt;/code&gt;, commonly used in Capture The Flag (CTF) competitions. The program performs a series of bitwise transformations and XOR operations on provided byte arrays (&lt;code&gt;fakeflag&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;affus&lt;/code&gt;, and &lt;code&gt;key2&lt;/code&gt;) and attempts to read a file whose name and contents are derived from these arrays. A provided Python script replicates the necessary transformations to compute the flag directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/pong.com</title>
      <link>//localhost:1313/posts/nexusftc-2025/pong.com/</link>
      <pubDate>Sat, 10 May 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/nexusftc-2025/pong.com/</guid>
      <description>&lt;h1 id=&#34;writeup-patching-pongcom-with-python-script&#34;&gt;Writeup: Patching &lt;code&gt;pong.com&lt;/code&gt; with Python Script&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The provided Python script, &lt;code&gt;patch_pong.py&lt;/code&gt;, modifies the MS-DOS COM executable &lt;code&gt;pong.com&lt;/code&gt; to reveal a hidden flag in a Capture The Flag (CTF) challenge. The script applies two byte patches to ensure the program jumps directly to the flag-displaying routine and exits cleanly, displaying the flag when run in DOSBox. This writeup explains the problem, the script&amp;rsquo;s functionality, and its effect.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;problem-context&#34;&gt;Problem Context&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;pong.com&lt;/code&gt; binary is a DOS-based game (likely Pong) containing a hidden flag. The flag is displayed when the game state byte at memory address &lt;code&gt;0x086B&lt;/code&gt; (referred to as &lt;code&gt;byte_1086B&lt;/code&gt;, file offset &lt;code&gt;0x086B - 0x0100 = 0x076B&lt;/code&gt;) is set to &lt;code&gt;0x03&lt;/code&gt;. This triggers a routine at &lt;code&gt;0x0796&lt;/code&gt; that prints:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rev/rusty</title>
      <link>//localhost:1313/posts/nexusftc-2025/rusty/</link>
      <pubDate>Sat, 10 May 2025 19:41:23 +0100</pubDate>
      <guid>//localhost:1313/posts/nexusftc-2025/rusty/</guid>
      <description>&lt;h2 id=&#34;rusty-steps-writeup&#34;&gt;Rusty Steps Writeup&lt;/h2&gt;&#xA;&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;&#xA;&lt;p&gt;This writeup details the steps to reverse engineer and analyze the binary &lt;code&gt;rustySteps&lt;/code&gt;. The challenge has 7 solves and is tagged as &amp;ldquo;easy&amp;rdquo;. The flag is &lt;code&gt;nexus{RusT_R3v_15_Fun_Right}&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;step-1-identifying-upx-packing&#34;&gt;Step 1: Identifying UPX Packing&lt;/h3&gt;&#xA;&lt;p&gt;After running the &lt;code&gt;strings&lt;/code&gt; command on the binary, we observe indications of UPX packing:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./showingUPXpacking.png&#34; alt=&#34;UPX Packing&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;To unpack the binary, we use the following command:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;upx -d rustySteps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;step-2-analyzing-with-strings-again&#34;&gt;Step 2: Analyzing with &lt;code&gt;strings&lt;/code&gt; Again&lt;/h3&gt;&#xA;&lt;p&gt;After unpacking, running &lt;code&gt;strings&lt;/code&gt; again reveals more interesting strings. This gives us clues for further analysis.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Past</title>
      <link>//localhost:1313/posts/pwnme/past/</link>
      <pubDate>Mon, 17 Mar 2025 22:29:05 +0100</pubDate>
      <guid>//localhost:1313/posts/pwnme/past/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;flag-pwnme4baf3723f62a15f22e86d57130bc40c3&#34;&gt;flag: PWNME{4baf3723f62a15f22e86d57130bc40c3}&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Using the provided binary and the encrypted file, find a way to retrieve the flag contained in &amp;ldquo;flag.enc&amp;rdquo;. Note that the binary would have been run in May 2024. Note: The flag is in the format PWNME{&amp;hellip;}&lt;/p&gt;&#xA;&lt;p&gt;Author :&lt;/p&gt;&#xA;&lt;p&gt;Flag format: &lt;code&gt;PWNME{.........................}&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;The binary uses the current time as a seed for the random number generator. The random number generator is used to generate a key to xor the content of the file &lt;code&gt;flag.enc&lt;/code&gt;. The key can be recovered by using the same seed as the binary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Printer</title>
      <link>//localhost:1313/posts/ingehack/printer/</link>
      <pubDate>Sun, 23 Feb 2025 22:24:57 +0100</pubDate>
      <guid>//localhost:1313/posts/ingehack/printer/</guid>
      <description>&lt;h1 id=&#34;ingehack2k25---reversemjsc-write-up&#34;&gt;IngeHack2k25 - reverse/mjsc Write-up&lt;/h1&gt;&#xA;&lt;h2 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Challenge Name&lt;/strong&gt;: reverse/printer&lt;br&gt;&#xA;&lt;strong&gt;Category&lt;/strong&gt;: Reverse Engineering&lt;br&gt;&#xA;&lt;strong&gt;Event&lt;/strong&gt;: IngeHack 2k25&lt;br&gt;&#xA;&lt;strong&gt;Difficulty&lt;/strong&gt;: Medium&lt;br&gt;&#xA;&lt;strong&gt;Flag&lt;/strong&gt;: &lt;code&gt;ingehack{...}&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;fourier-transformation-based-image-decryption&#34;&gt;Fourier Transformation-Based Image Decryption&lt;/h2&gt;&#xA;&lt;h3 id=&#34;challenge-analysis&#34;&gt;&lt;strong&gt;Challenge Analysis&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Upon analyzing the provided files, we observed the following directory structure:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;➜  solver ls &#xA;decrypted.png  enc  main  reconstructed_data.txt  sol.py&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main objective is to decrypt the file &lt;code&gt;enc&lt;/code&gt; to retrieve an image. By inspecting &lt;code&gt;main&lt;/code&gt;, we determined that it applies a Fourier transformation, meaning the encryption likely involves transforming the image into the frequency domain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mjsc</title>
      <link>//localhost:1313/posts/ingehack/mjsc/</link>
      <pubDate>Sun, 23 Feb 2025 22:24:52 +0100</pubDate>
      <guid>//localhost:1313/posts/ingehack/mjsc/</guid>
      <description>&lt;h1 id=&#34;ingehack2k25---reversemjsc&#34;&gt;ingehack2k25 - reverse/mjsc&lt;/h1&gt;&#xA;&lt;h1 id=&#34;mjsc-ctf-challenge-write-up&#34;&gt;MJSC CTF Challenge Write-up&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Challenge: reverse/mjsc&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Event: IngeHack 2k25&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Author: 4ymen&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Points: 469&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Solves: 4&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Difficulty: Medium&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;Original Challenge Author: itskarudo&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenge-information&#34;&gt;Challenge Information&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Reverse Engineering&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Web/JavaScript&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flag&lt;/strong&gt;: ingehack{i_hate_js_rev_chals_they_never_have_a_new_idea}&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;initial-analysis&#34;&gt;Initial Analysis&lt;/h2&gt;&#xA;&lt;p&gt;The challenge presented us with a web application that needed to be analyzed. The initial reconnaissance showed:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Web interface requiring input validation&lt;/li&gt;&#xA;&lt;li&gt;Heavy use of JavaScript for validation&lt;/li&gt;&#xA;&lt;li&gt;Obfuscated code to hide the validation logic&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;technical-environment&#34;&gt;Technical Environment&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Platform&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Primary Language&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;JavaScript&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Key Components&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;React Application&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Obfuscated JavaScript&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Client-side validation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;investigation-process&#34;&gt;Investigation Process&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Source Code Retrieval&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dados</title>
      <link>//localhost:1313/posts/ingehack/dados/</link>
      <pubDate>Sun, 23 Feb 2025 22:24:46 +0100</pubDate>
      <guid>//localhost:1313/posts/ingehack/dados/</guid>
      <description>&lt;h1 id=&#34;ingehack2k25---reversedados&#34;&gt;ingehack2k25 - reverse/dados&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Write-Up Author : 4ymen&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Flag: ingehack{security_by_obscurity}&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description:&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;infinite luck in exchange for a flag&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1hMyVNwUrK-X0PvlPQIUjNnDt17W9gB_M/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;dados.apk&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;title: &amp;#34;Reverse Engineering Challenge &amp;#34;&#xA;difficulty: Easy&#xA;category: Reverse Engineering&#xA;platform: Android&#xA;tools: [&amp;#34;apktool&amp;#34;, &amp;#34;smali&amp;#34;, &amp;#34;Frida&amp;#34;, &amp;#34;adb&amp;#34;]&#xA;author : &amp;#34;godsword&amp;#34;&#xA;date: &amp;#34;2025-02-23&amp;#34;&#xA;tags: [&amp;#34;Reverse Engineering&amp;#34;, &amp;#34;Android&amp;#34;, &amp;#34;Frida&amp;#34;, &amp;#34;Smali&amp;#34;, &amp;#34;CTF&amp;#34;]&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;write-up&#34;&gt;Write up&lt;/h1&gt;&#xA;&lt;h3 id=&#34;step-1-identifying-the-main-activity&#34;&gt;&lt;strong&gt;Step 1: Identifying the Main Activity&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://hackmd.io/_uploads/BkQItTO5Jg.png&#34; alt=&#34;Screenshot From 2025-02-23 17-12-51&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;After decompiling &lt;code&gt;dados.apk&lt;/code&gt;, I checked &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&#xA;to find the app&amp;rsquo;s entry point. The &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt; tag with &lt;code&gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt; containing &lt;code&gt;android.intent.action.MAIN&lt;/code&gt; and &lt;code&gt;android.intent.category.LAUNCHER&lt;/code&gt; revealed that the main activity is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>crypto/crypto_alphascii_testing</title>
      <link>//localhost:1313/posts/htb-ctf/crypto_alphascii_testing/</link>
      <pubDate>Wed, 27 Nov 2024 22:29:05 +0100</pubDate>
      <guid>//localhost:1313/posts/htb-ctf/crypto_alphascii_testing/</guid>
      <description>&lt;p&gt;To create a detailed write-up for the &lt;code&gt;sol.md&lt;/code&gt; file explaining how you solved the challenge, here is a structured explanation based on the provided code snippet and error trace:&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution-write-up-for-crypto_alphascii_testing-challenge&#34;&gt;Solution Write-Up for &lt;code&gt;crypto_alphascii_testing&lt;/code&gt; Challenge&lt;/h2&gt;&#xA;&lt;h3 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h3&gt;&#xA;&lt;p&gt;The challenge involves interacting with a Python-based login application that uses MD5 for password storage. The application provides options to register and login using JSON formatted inputs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;steps-to-solve-the-challenge&#34;&gt;Steps to Solve the Challenge&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Understanding the Application Workflow&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
